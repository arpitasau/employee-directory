{"version":3,"sources":["components/user.js","components/employee.js","components/tableHeaders.js","components/table.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["user","alt","picture","name","src","medium","className","first","last","email","cell","dayjs","dob","date","format","props","useState","employees","setEmployees","useEffect","findEmployees","sortedEmps","filter","data","currentSearchValue","toLowerCase","includes","sort","a","b","currentSortState","axios","res","results","map","emp","key","TableHeaders","createTableHeaders","header","scope","this","React","Component","id","htmlFor","type","placeholder","aria-describedby","onChange","e","onSearchChanged","style","textAlign","value","onClick","onSortChanged","App","search","setSearch","sorter","setSorter","event","searchTerm","target","sortVal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eea67504.chunk.js","sourcesContent":["import React from \"react\";\nimport dayjs from \"dayjs\"\n\n\nexport default ({ user }) => (\n    <>\n        <tr>\n            <td><img alt={user.picture.name} src={user.picture.medium} /></td>\n            <td className=\"align-middle\">{user.name.first} {user.name.last}</td>\n            <td className=\"align-middle\">{user.email}</td>\n            <td className=\"align-middle\">{user.cell}</td>\n            <td className=\"align-middle\">{dayjs(user.dob.date).format(\"MM-DD-YYYY\")}</td>\n        </tr>\n    </>\n)","//importing dependencies\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport User from \"./user\"\n\nexport default function (props) {\n  const [employees, setEmployees] = useState([]);\n  \n  useEffect(() => {\n    findEmployees()\n  }, [])\n\n  const sortedEmps = \n    employees\n      .filter(data => {\n          if (props.currentSearchValue == null) {\n              return data\n          }\n          else if (data.name.first.toLowerCase().includes(props.currentSearchValue.toLowerCase()) || data.name.last.toLowerCase().includes(props.currentSearchValue.toLowerCase())) {\n              return data\n          }\n      }).sort((a, b) => { \n        if (props.currentSortState === \"asc\") {\n          if (a.name.first.toLowerCase() < b.name.first.toLowerCase()) return -1;\n          if (a.name.first.toLowerCase() > b.name.first.toLowerCase()) return 1;\n        } else {\n          if (a.name.first > b.name.first) return -1;\n          if (a.name.first < b.name.first)return 1;\n        }\n        return 0;\n \n  });\n\n  const findEmployees = async () => { \n    const res = await axios(`https://randomuser.me/api/?results=200&nat=us`)\n    setEmployees(res.data.results)\n  }\n\n  return (\n    <>\n      {sortedEmps\n          .map(emp => <User key={emp.cell} user={emp} />)\n      }\n    </>\n  )\n};","import React from 'react';\n\nexport default class TableHeaders extends React.Component {\n    createTableHeaders = (props) => {\n        let headers = [\"Image\", \"Name\",  \"Email\", \"Phone\", \"DOB\"];\n\n\n        return headers.map(header => {\n            return (\n                <>\n                    <th scope=\"col\" key={header} className=\"text-center\">{header} </th>\n                </>\n            )\n        });\n    }\n    \n    render () {\n        return ( \n            <>\n            {this.createTableHeaders()}\n            </>\n        )    \n    }\n}","import React from 'react';\nimport Employee from \"./employee\";\nimport Headers from \"./tableHeaders\";\n\n\nexport default function (props) {\n    return (\n        <>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr><Headers  /></tr>\n                </thead>\n                <tbody>\n                    <Employee currentSearchValue= {props.currentSearchValue} currentSortState={props.currentSortState}/>\n                </tbody>\n            </table>\n        </>\n    )\n}","import React from 'react';\n\nexport default function (props) {\n    \n    return (\n        <>\n            <div className=\"form-group\">\n                <label id=\"searchLabel\" htmlFor=\"searchInput\">Search</label>\n                <input type=\"search\" className=\"form-control\" placeholder=\"Search Employees\" id=\"searchInput\" aria-describedby=\"searcher\" onChange={e => props.onSearchChanged(e)}/>\n            </div>\n            <div style={{textAlign: \"center\"}}>\n             <button className=\"button\" value=\"asc\" onClick={e=>props.onSortChanged(e)}>Sort by Names(A - Z) </button>\n             <button className=\"button\" value=\"desc\" onClick={e=>props.onSortChanged(e)}>Sort by Names(Z - A)</button>\n            </div>\n        </>\n    )\n}\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport Table from \"./components/table\"\nimport Search from \"./components/search\"\n\n\nfunction App() {\n  const [search, setSearch] = useState(null);\n  const [sorter, setSorter] = useState(\"asc\");\n\n    const searchToState = (event)=> {\n        let searchTerm = event.target.value;\n        setSearch(searchTerm)\n    }\n\n    const sortToState = (event)=> {\n      let sortVal = event.target.value;\n      setSorter(sortVal)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Employee Directory</h1>\n      </header>\n      <Search onSearchChanged={searchToState} onSortChanged={sortToState} />\n      <Table currentSearchValue= {search} currentSortState={sorter}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}